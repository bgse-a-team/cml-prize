}
for (i in 1:ncol(data)){
data[data[,i] == "" | data == " ",i] <- NA
}
for (i in 1:ncol(data)){
for (j in 1:nrow(data)){
data[data[j,i] == "" | data == " ",i] <- NA
}
}
for (i in 1:ncol(data)){
for (j in 1:nrow(data)){
if (data[i,j] == "" | data[i,j] == " "){
data[i,j] <- NA
}
}
}
1:ncol(data)
1:ncol(data)
1:nrow(data)
for (i in 1:ncol(data)){
for (j in 1:nrow(data)){
if (data[j,i] == "" | data[j,i] == " "){
data[j,i] <- NA
}
}
}
data[1,11]
View(data)
data[2,11]
data[2,11] == ""
for (i in 1:ncol(data)){
for (j in 1:nrow(data)){
if (data[j,i] == ""){
data[j,i] <- NA
}
}
}
data2 <- data.frame(rep(NA,ncol(data)*nrow(data)),ncol=ncol(data))
data2 <- data.frame(rep(NA,ncol(data)*nrow(data)),ncol=ncol(data))
for (i in 1:ncol(data)){
for (j in 1:nrow(data)){
if (data[j,i] != ""){
data2[j,i] <- data[j,i]
}
}
}
?data.frame
data2 <- data.frame(matrix(rep(NA,ncol(data)*nrow(data)),ncol=ncol(data)))
for (i in 1:ncol(data)){
for (j in 1:nrow(data)){
if (data[j,i] != ""){
data2[j,i] <- data[j,i]
}
}
}
data <- data.frame(read_sav("~/Downloads/2011vict.sav"))
sapply(data)
sapply(data,class)
data <- read_sav("~/Downloads/2011vict.sav")
objects(data)
str(data)
data <- data.frame(read_sav("~/Downloads/2011vict.sav"))
apply(data, 2, function(x) gsub("^$|^ $", NA, x))
data2 <- apply(data, 2, function(x) gsub("^$|^ $", NA, x))
library(haven)
data <- data.frame(read_sav("~/Downloads/2011vict.sav"))
library(foreign)
data2 <- apply(data, 2, function(x) gsub("^$|^ $", NA, x))
View(data)
View(data2)
class(data2)
write.dta(data2, "~/Downloads/2011vict.sav.dta")
data2 <- as.data.frame(apply(data, 2, function(x) gsub("^$|^ $", NA, x)))
write.dta(data2, "~/Downloads/2011vict.sav.dta")
sapply(data,class)
View(data)
data <- data.frame(read_sav("~/Downloads/2011vict.sav"))
data <- as.data.frame(apply(data, 2, function(x) gsub("^$|^ $", NA, x)))
View(data)
sapply(data,class)
setwd("~/Desktop/cml-prize/data")
library(readr)
library(class)
library(AUC)
library(e1071)
X_train <- as.data.frame(read_csv("X_train.dat"))
X_train <- X_train[,-1]
X_train <- X_train[,-which(apply(X_train,2,function(x) all(x==0)))]
colnames(X_train) <- paste0(rep("X",ncol(X_train)),1:ncol(X_train))
X_train <- apply(X_train, 2, scale)
y_train <- as.data.frame(read_csv("y_train.dat", col_names = FALSE))
y_train <- as.factor(y_train[,2])
?prcomp
principal_components <- prcomp(X_train)$x
class(principal_components)
colnames(principal_components)
folds <- cut(seq(1:nrow(X_train)),breaks=4,labels=F)
AUC <- matrix(rep(NA,ncol(X_train)*length(unique(folds))),ncol=ncol(X_train))
principal_components <- prcomp(X_train)$x
i=2
k=2
testDataX <- principal_components[which(folds==i),]
testDatay <- y_train[which(folds==i)]
trainDataX <- principal_components[-which(folds==i),]
trainDatay <- y_train[-which(folds==i)]
logistic_model <- glm(trainDatay ~ trainDataX[,1:k], family="binomial")
logistic_model
summary(logistic_model)
predictions <- predict(logistic_model, newdata=testDataX[,1:k], type="class")
predictions <- predict(logistic_model, newdata=testDataX[,1:k], type="response")
folds <- cut(seq(1:nrow(X_train)),breaks=4,labels=F)
AUC <- matrix(rep(NA,ncol(X_train)*length(unique(folds))),ncol=ncol(X_train))
principal_components <- prcomp(X_train)$x
testDataX <- principal_components[which(folds==i),]
testDatay <- y_train[which(folds==i)]
trainDataX <- principal_components[-which(folds==i),]
trainDatay <- y_train[-which(folds==i)]
complete_data <- as.data.frame(cbind(trainDatay,principal_components[,1:k]))
dim(complete_data)
head(complete_data)
tail(complete_data)
colnames(complete_data) <- c("y",colnames(principal_components[,1:k]))
tail(complete_data)
complete_data <- as.data.frame(cbind(trainDatay,principal_components[,1:k]))
logistic_model <- glm(trainDatay ~ ., data=complete_data,family="binomial")
folds <- cut(seq(1:nrow(X_train)),breaks=4,labels=F)
AUC <- matrix(rep(NA,ncol(X_train)*length(unique(folds))),ncol=ncol(X_train))
principal_components <- prcomp(X_train)$x
testDataX <- principal_components[which(folds==i),]
testDatay <- y_train[which(folds==i)]
trainDataX <- principal_components[-which(folds==i),]
trainDatay <- y_train[-which(folds==i)]
complete_data <- as.data.frame(principal_components[,1:k])
logistic_model <- glm(trainDatay ~ ., data=complete_data,family="binomial")
length(trainDatay)
complete_data <- as.data.frame(testDataX[,1:k])
logistic_model <- glm(trainDatay ~ ., data=complete_data,family="binomial")
dim8testDataX
dim(testDataX)
complete_data <- as.data.frame(trainDataX[,1:k])
logistic_model <- glm(trainDatay ~ ., data=complete_data,family="binomial")
summary(logistic_model)
predictions <- predict(logistic_model, newdata=testDataX[,1:k], type="response")
colnames(as.data.frame(testDataX[,1:k]))
predictions <- predict(logistic_model, newdata=as.data.frame(testDataX[,1:k]), type="response")
head(predictions)
predictions <- predict(logistic_model, newdata=as.data.frame(testDataX[,1:k]), type="class")
folds <- cut(seq(1:nrow(X_train)),breaks=4,labels=F)
AUC <- matrix(rep(NA,ncol(X_train)*length(unique(folds))),ncol=ncol(X_train))
principal_components <- prcomp(X_train)$x
testDataX <- principal_components[which(folds==i),]
testDatay <- y_train[which(folds==i)]
trainDataX <- principal_components[-which(folds==i),]
trainDatay <- y_train[-which(folds==i)]
complete_data <- as.data.frame(trainDataX[,1:k])
logistic_model <- glm(trainDatay ~ ., data=complete_data,family=binomial)
predictions <- predict(logistic_model, newdata=as.data.frame(testDataX[,1:k]), type="class")
mean(predictions)
hist(predictions)
folds <- cut(seq(1:nrow(X_train)),breaks=4,labels=F)
AUC <- matrix(rep(NA,ncol(X_train)*length(unique(folds))),ncol=ncol(X_train))
principal_components <- prcomp(X_train)$x
testDataX <- principal_components[which(folds==i),]
testDatay <- y_train[which(folds==i)]
trainDataX <- principal_components[-which(folds==i),]
trainDatay <- y_train[-which(folds==i)]
complete_data <- as.data.frame(trainDataX[,1:k])
logistic_model <- glm(trainDatay ~ ., data=complete_data,family=binomial)
predictions <- predict(logistic_model, newdata=as.data.frame(testDataX[,1:k]), type="response")
predictions[predictions < 0.5] <- 0
predictions[predictions >= 0.5] <- 1
predictions <- as.factor(predictions)
table(predictions)
table(testDatay)
folds <- cut(seq(1:nrow(X_train)),breaks=4,labels=F)
AUC <- matrix(rep(NA,ncol(X_train)*length(unique(folds))),ncol=ncol(X_train))
principal_components <- prcomp(X_train)$x
for (i in 1:length(unique(folds))){
testDataX <- principal_components[which(folds==i),]
testDatay <- y_train[which(folds==i)]
trainDataX <- principal_components[-which(folds==i),]
trainDatay <- y_train[-which(folds==i)]
for (k in 1:ncol(principal_components)){
complete_data <- as.data.frame(trainDataX[,1:k])
logistic_model <- glm(trainDatay ~ ., data=complete_data,family=binomial)
predictions <- predict(logistic_model, newdata=as.data.frame(testDataX[,1:k]), type="response")
predictions[predictions < 0.5] <- 0
predictions[predictions >= 0.5] <- 1
predictions <- as.factor(predictions)
AUC[i,k] <- auc(roc(predictions,testDatay))
}
}
ncol(principal_components)
folds <- cut(seq(1:nrow(X_train)),breaks=4,labels=F)
AUC <- matrix(rep(NA,ncol(X_train)*length(unique(folds))),ncol=ncol(X_train))
principal_components <- prcomp(X_train)$x
testDataX <- principal_components[which(folds==i),]
testDatay <- y_train[which(folds==i)]
trainDataX <- principal_components[-which(folds==i),]
trainDatay <- y_train[-which(folds==i)]
complete_data <- as.data.frame(trainDataX[,1:k])
logistic_model <- glm(trainDatay ~ ., data=complete_data,family=binomial)
predictions <- predict(logistic_model, newdata=as.data.frame(testDataX[,1:k]), type="response")
folds <- cut(seq(1:nrow(X_train)),breaks=4,labels=F)
AUC <- matrix(rep(NA,ncol(X_train)*length(unique(folds))),ncol=ncol(X_train))
principal_components <- prcomp(X_train)$x
testDataX <- principal_components[which(folds==i),]
testDatay <- y_train[which(folds==i)]
trainDataX <- principal_components[-which(folds==i),]
trainDatay <- y_train[-which(folds==i)]
complete_data <- as.data.frame(trainDataX[,1:k])
logistic_model <- glm(trainDatay ~ ., data=complete_data, family=binomial)
predictions <- predict(logistic_model, newdata=as.data.frame(testDataX[,1:k]), type="response")
folds <- cut(seq(1:nrow(X_train)),breaks=4,labels=F)
AUC <- matrix(rep(NA,ncol(X_train)*length(unique(folds))),ncol=ncol(X_train))
principal_components <- prcomp(X_train)$x
testDataX <- principal_components[which(folds==i),]
testDatay <- y_train[which(folds==i)]
trainDataX <- principal_components[-which(folds==i),]
trainDatay <- y_train[-which(folds==i)]
dim(trainDataX)
colnames(trainDataX)
complete_data <- as.data.frame(trainDataX[,1:k])
logistic_model <- glm(trainDatay ~ ., data=complete_data, family=binomial)
predictions <- predict(logistic_model, newdata=as.data.frame(testDataX[,1:k]), type="response")
colnames(as.data.frame(testDataX[,1:k]))
colnames(as.data.frame(testDataX[,1:k],drop=F))
colnames(testDataX[,1:k])
k
colnames(testDataX)
testDataX[,1:k]
colnames(as.data.frame(testDataX[,1:k,drop=F]))
folds <- cut(seq(1:nrow(X_train)),breaks=4,labels=F)
AUC <- matrix(rep(NA,ncol(X_train)*length(unique(folds))),ncol=ncol(X_train))
principal_components <- prcomp(X_train)$x
testDataX <- principal_components[which(folds==i),]
testDatay <- y_train[which(folds==i)]
trainDataX <- principal_components[-which(folds==i),]
trainDatay <- y_train[-which(folds==i)]
complete_data <- as.data.frame(trainDataX[,1:k])
logistic_model <- glm(trainDatay ~ ., data=complete_data, family=binomial)
predictions <- predict(logistic_model, newdata=as.data.frame(testDataX[,1:k,drop=F]), type="response")
colnames(as.data.frame(testDataX[,1:k,drop=F]))
summary(logistic_model)
folds <- cut(seq(1:nrow(X_train)),breaks=4,labels=F)
AUC <- matrix(rep(NA,ncol(X_train)*length(unique(folds))),ncol=ncol(X_train))
principal_components <- prcomp(X_train)$x
testDataX <- principal_components[which(folds==i),]
testDatay <- y_train[which(folds==i)]
trainDataX <- principal_components[-which(folds==i),]
trainDatay <- y_train[-which(folds==i)]
complete_data <- as.data.frame(trainDataX[,1:k, drop=F])
logistic_model <- glm(trainDatay ~ ., data=complete_data, family=binomial)
predictions <- predict(logistic_model, newdata=as.data.frame(testDataX[,1:k, drop=F]), type="response")
folds <- cut(seq(1:nrow(X_train)),breaks=4,labels=F)
AUC <- matrix(rep(NA,ncol(X_train)*length(unique(folds))),ncol=ncol(X_train))
principal_components <- prcomp(X_train)$x
for (i in 1:length(unique(folds))){
testDataX <- principal_components[which(folds==i),]
testDatay <- y_train[which(folds==i)]
trainDataX <- principal_components[-which(folds==i),]
trainDatay <- y_train[-which(folds==i)]
for (k in 1:ncol(principal_components)){
complete_data <- as.data.frame(trainDataX[,1:k, drop=F])
logistic_model <- glm(trainDatay ~ ., data=complete_data, family=binomial)
predictions <- predict(logistic_model, newdata=as.data.frame(testDataX[,1:k, drop=F]), type="response")
predictions[predictions < 0.5] <- 0
predictions[predictions >= 0.5] <- 1
predictions <- as.factor(predictions)
AUC[i,k] <- auc(roc(predictions,testDatay))
}
}
AUC
which.max(apply(AUC,2,mean))
plot(1:73,apply(AUC,2,mean),type="l")
round(apply(AUC,2,mean)*100,1)
which.max(apply(AUC,2,mean))
library(MASS)
logistic_model <- glm(y_train ~ ., data=X_train, family=binomial)
logistic_model <- glm(y_train ~ ., data=as.data.frame(X_train), family=binomial)
summary(logistic_regression)
summary(logistic_model)
head(X_train[,43])
summary(X_train[,43])
summary(X_train[,"X43"])
str(X_train[,"X43"])
summary(X_train[,"X50"])
table(is.na(X_train[,"X50"]))
table(is.na(X_train[,"X43"]))
logistic_model <- glm(y_train ~ ., data=as.data.frame(X_train), family=binomial)
summary(logistic_model)
step <- stepAIC(logistic_regression, direction="both")
step <- stepAIC(logistic_model, direction="both")
i=2
folds <- cut(seq(1:nrow(X_train)),breaks=4,labels=F)
AUC <- rep(NA,length(folds))
testDataX <- X_train[which(folds==i),]
testDatay <- y_train[which(folds==i)]
trainDataX <- X_train[-which(folds==i),]
trainDatay <- y_train[-which(folds==i)]
library(glmnet)
logistic_model <- glmnet(trainDataX, testDatay, alpha=1, family="binomial")
logistic_model <- glmnet(trainDataX, trainDatay, alpha=1, family="binomial")
summary(logistic_model)
logistic_model
?glmnet
plot(logistic_model, xvar="lambda")
coef(logistic_model)
as.data.frame(testDataX[drop=F])
colnames(as.data.frame(testDataX[drop=F]))
predictions <- predict(logistic_model, newdata=as.data.frame(testDataX[drop=F]), type="response")
objects(logistic_model)
logistic_model$lambda
cv_logistic_model <- cv.glment(trainDataX, trainDatay, alpha=1, family="binomial")
cv_logistic_model <- cv.glmnet(trainDataX, trainDatay, alpha=1)
cv_logistic_model <- cv.glmnet(trainDataX, as.numeric(trainDatay), alpha=1)
cv_logistic_model$lambda.min
cv_logistic_model <- cv.glmnet(X_train, as.numeric(y_train), alpha=1)
cv_logistic_model$lambda.min
?glment
?glmnet
folds <- cut(seq(1:nrow(X_train)),breaks=4,labels=F)
AUC <- rep(NA,length(folds))
i=2
testDataX <- X_train[which(folds==i),]
testDatay <- y_train[which(folds==i)]
trainDataX <- X_train[-which(folds==i),]
trainDatay <- y_train[-which(folds==i)]
logistic_model <- glmnet(trainDataX, trainDatay, alpha=1, family="binomial", lambda=best_lambda)
best_lambda
best_lambda <- cv_logistic_model$lambda.min
logistic_model <- glmnet(trainDataX, trainDatay, alpha=1, family="binomial", lambda=best_lambda)
predictions <- predict(logistic_model, newdata=as.data.frame(testDataX[drop=F]), s=best_lambda, type="response")
predictions <- predict(logistic_model, newx=as.data.frame(testDataX[drop=F]), s=best_lambda, type="response")
predictions <- predict(logistic_model, newx=testDataX, s=best_lambda, type="response")
head(predictions)
predictions[predictions < 0.5] <- 0
predictions[predictions >= 0.5] <- 1
predictions <- as.factor(predictions)
AUC[i] <- auc(roc(predictions,testDatay))
auc(roc(predictions,testDatay))
head(predictions)
head(testDatay)
length(testDatay)
length(predictions)
folds <- cut(seq(1:nrow(X_train)),breaks=4,labels=F)
AUC <- rep(NA,length(folds))
testDataX <- X_train[which(folds==i),]
testDatay <- y_train[which(folds==i)]
trainDataX <- X_train[-which(folds==i),]
trainDatay <- y_train[-which(folds==i)]
logistic_model <- glmnet(trainDataX, trainDatay, alpha=1, family="binomial", lambda=best_lambda)
predictions <- predict(logistic_model, newx=testDataX, s=best_lambda, type="response")
predictions[predictions < 0.5] <- 0
predictions[predictions >= 0.5] <- 1
predictions <- as.factor(predictions)
AUC[i] <- auc(roc(predictions,testDatay))
AUC[i] <- AUC::auc(roc(predictions,testDatay))
AUC
folds <- cut(seq(1:nrow(X_train)),breaks=4,labels=F)
AUC <- rep(NA,length(folds))
cv_logistic_model <- cv.glmnet(X_train, as.numeric(y_train), alpha=1)
best_lambda <- cv_logistic_model$lambda.min
for (i in 1:length(unique(folds))){
testDataX <- X_train[which(folds==i),]
testDatay <- y_train[which(folds==i)]
trainDataX <- X_train[-which(folds==i),]
trainDatay <- y_train[-which(folds==i)]
logistic_model <- glmnet(trainDataX, trainDatay, alpha=1, family="binomial", lambda=best_lambda)
predictions <- predict(logistic_model, newx=testDataX, s=best_lambda, type="response")
predictions[predictions < 0.5] <- 0
predictions[predictions >= 0.5] <- 1
predictions <- as.factor(predictions)
AUC[i] <- AUC::auc(roc(predictions,testDatay))
}
AUC
folds <- cut(seq(1:nrow(X_train)),breaks=4,labels=F)
AUC <- rep(NA,length(unique(folds)))
cv_logistic_model <- cv.glmnet(X_train, as.numeric(y_train), alpha=1)
best_lambda <- cv_logistic_model$lambda.min
for (i in 1:length(unique(folds))){
testDataX <- X_train[which(folds==i),]
testDatay <- y_train[which(folds==i)]
trainDataX <- X_train[-which(folds==i),]
trainDatay <- y_train[-which(folds==i)]
logistic_model <- glmnet(trainDataX, trainDatay, alpha=1, family="binomial", lambda=best_lambda)
predictions <- predict(logistic_model, newx=testDataX, s=best_lambda, type="response")
predictions[predictions < 0.5] <- 0
predictions[predictions >= 0.5] <- 1
predictions <- as.factor(predictions)
AUC[i] <- AUC::auc(roc(predictions,testDatay))
}
AUC
mean(AUC)
folds <- cut(seq(1:nrow(X_train)),breaks=4,labels=F)
AUC <- rep(NA,length(unique(folds)))
cv_logistic_model <- cv.glmnet(X_train, as.numeric(y_train), alpha=1)
best_lambda <- cv_logistic_model$lambda.min
for (i in 1:length(unique(folds))){
testDataX <- X_train[which(folds==i),]
testDatay <- y_train[which(folds==i)]
trainDataX <- X_train[-which(folds==i),]
trainDatay <- y_train[-which(folds==i)]
logistic_model <- glmnet(trainDataX, trainDatay, alpha=1, family="binomial", lambda=best_lambda)
predictions <- predict(logistic_model, newx=testDataX, s=best_lambda, type="response")
predictions[predictions < 0.5] <- 0
predictions[predictions >= 0.5] <- 1
predictions <- as.factor(predictions)
AUC[i] <- AUC::auc(roc(predictions,testDatay))
}
AUC
mean(AUC) # 0.7096
folds <- cut(seq(1:nrow(X_train)),breaks=4,labels=F)
AUC <- rep(NA,length(unique(folds)))
cv_logistic_model <- cv.glmnet(X_train, as.numeric(y_train), alpha=1)
best_lambda <- cv_logistic_model$lambda.min
for (i in 1:length(unique(folds))){
testDataX <- X_train[which(folds==i),]
testDatay <- y_train[which(folds==i)]
trainDataX <- X_train[-which(folds==i),]
trainDatay <- y_train[-which(folds==i)]
logistic_model <- glmnet(trainDataX, trainDatay, alpha=1, family="binomial", lambda=best_lambda)
predictions <- predict(logistic_model, newx=testDataX, s=best_lambda, type="response")
predictions[predictions < 0.5] <- 0
predictions[predictions >= 0.5] <- 1
predictions <- as.factor(predictions)
AUC[i] <- AUC::auc(roc(predictions,testDatay))
}
AUC
mean(AUC) # 0.7096
list.files()
X_test <- as.data.frame(read_csv("X_test.dat"))
colnames(X_test)
X_test <- X_test[,-1]
X_test <- as.data.frame(read_csv("X_test.dat"))
View(X_test)
X_test <- X_test[,-1]
which(apply(X_test,2,function(x) all(x==0)))
X_test <- X_test[,-which(apply(X_test,2,function(x) all(x==0)))]
colnames(X_test) <- paste0(rep("X",ncol(X_test)),1:ncol(X_test))
X_test <- apply(X_test, 2, scale)
View(X_test)
logistic_model <- glmnet(X_train, y_train, alpha=1, family="binomial", lambda=best_lambda)
predictions <- predict(logistic_model, newx=X_test, s=best_lambda, type="response")
predictions[predictions < 0.5] <- 0
predictions[predictions >= 0.5] <- 1
predictions <- as.factor(predictions)
table(predictions)
dim(X_test)
cv_logistic_model <- cv.glmnet(X_train, as.numeric(y_train), alpha=1)
best_lambda <- cv_logistic_model$lambda.min
logistic_model <- glmnet(X_train, y_train, alpha=1, family="binomial", lambda=best_lambda)
predictions <- predict(logistic_model, newx=X_test, s=best_lambda, type="response")
predictions[predictions < 0.5] <- 0
predictions[predictions >= 0.5] <- 1
predictions <- as.factor(predictions)
table(predictions)
head(predictions)
write.csv("first_submission.csv")
cv_logistic_model <- cv.glmnet(X_train, as.numeric(y_train), alpha=1)
best_lambda <- cv_logistic_model$lambda.min
logistic_model <- glmnet(X_train, y_train, alpha=1, family="binomial", lambda=best_lambda)
predictions <- predict(logistic_model, newx=X_test, s=best_lambda, type="response")
predictions[predictions < 0.5] <- 0
predictions[predictions >= 0.5] <- 1
predictions <- as.factor(predictions)
write.csv(predictions, file="first_submission.csv")
pred <- cbind(as.data.frame(read_csv("X_test.dat"))[,1], predictions)
View(pred)
head(predictions)
predictions <- predict(logistic_model, newx=X_test, s=best_lambda, type="response")
class(predictions)
head(predictions)
predictions[predictions < 0.5] <- 0
class(predictions)
predictions[predictions >= 0.5] <- 1
class(predictions)
pred <- cbind(as.data.frame(read_csv("X_test.dat"))[,1], predictions)
pred <- cbind(as.matrix(read_csv("X_test.dat"))[,1], predictions)
View(pred)
cv_logistic_model <- cv.glmnet(X_train, as.numeric(y_train), alpha=1)
best_lambda <- cv_logistic_model$lambda.min
logistic_model <- glmnet(X_train, y_train, alpha=1, family="binomial", lambda=best_lambda)
predictions <- predict(logistic_model, newx=X_test, s=best_lambda, type="response")
predictions[predictions < 0.5] <- 0
predictions[predictions >= 0.5] <- 1
pred <- cbind(as.matrix(read_csv("X_test.dat"))[,1], predictions)
colnames(pred) <- c("Id","Prediction")
write.csv(pred, file="first_submission.csv")
?write.csv
write.csv(pred, file="first_submission.csv", row.names=F)
View(pred)
write.csv(pred, file="first_submission.csv", row.names=F)
write.csv(pred, file="first_submission.csv", row.names=F, sep=",")
class(pred)
dim(pred)
write.csv(pred, file="first_submission.csv", row.names=F)
write.table(pred, file="first_submission.csv", row.names=F)
apply(pred,2,as.character)
pred <- apply(pred,2,as.character)
write.csv(pred, file="first_submission.csv", row.names=F)
cv_logistic_model <- cv.glmnet(X_train, as.numeric(y_train), alpha=1)
best_lambda <- cv_logistic_model$lambda.min
logistic_model <- glmnet(X_train, y_train, alpha=1, family="binomial", lambda=best_lambda)
predictions <- predict(logistic_model, newx=X_test, s=best_lambda, type="response")
predictions[predictions < 0.5] <- 0
predictions[predictions >= 0.5] <- 1
pred <- cbind(as.matrix(read_csv("X_test.dat"))[,1], predictions)
colnames(pred) <- c("Id","Prediction")
write.csv2(pred, file="first_submission.csv", row.names=F)
write.csv2(pred, file="first_submission.csv", row.names=F, sep=",")
write.csv(pred, file="first_submission.csv", row.names=F)
